{"version":3,"file":"render-mockup.umd.js","sources":["../src/render-mockup.js"],"sourcesContent":["import * as THREE from \"three\";\nimport * as dat from \"dat.gui\";\n\nexport default async function(mockup, design, displacementMap, parent) {\n    var vertex = `\nvarying vec2 vUv;\nvoid main() {\n  vUv = uv;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}\n`;\n\n    var fragment = `\nvarying vec2 vUv;\n\nuniform sampler2D displacementMap;\nuniform sampler2D mockup;\nuniform sampler2D design;\nuniform bool multiply;\nuniform bool displacement;\nuniform float displacementIntensity;\nuniform float multiplyIntensity;\nuniform float blendOpacity;\nuniform vec2 designScale;\nuniform float rotation;\nuniform float offsetX;\nuniform float offsetY;\nuniform vec2 mockupOffset;\nuniform vec2 mockupSize;\n\nmat2 getRotM(float ang) {\n  float s = sin(ang);\n  float c = cos(ang);\n  return mat2(c, -s, s, c);\n}\n\nvec2 rotateUV(vec2 uv, float rotation, float mid) {\n    return vec2(\n      cos(rotation) * (uv.x - mid) + sin(rotation) * (uv.y - mid) + mid,\n      cos(rotation) * (uv.y - mid) - sin(rotation) * (uv.x - mid) + mid\n    );\n}\n\nvoid main() {\n    // Translate mockup UVs to position mockup in render space. This UV is used for the mockup, and the mockup displacement map.\n    float mockupTranslatedX = vUv.x * mockupSize.x + mockupOffset.x;\n    float mockupTranslatedY = vUv.y * mockupSize.y + mockupOffset.y;\n    vec2 mockupTranslatedUV = vec2(mockupTranslatedX, mockupTranslatedY);\n\n    // Calculate displacement map vector.\n    vec4 displacementMapTex = texture2D(displacementMap, mockupTranslatedUV);\n    vec2 displacementVector = vec2(0,0);\n    if (displacement) {\n        displacementVector = vec2(displacementMapTex.r, displacementMapTex.g);\n    }\n\n    // Get offset translated UV\n    vec2 translatedUV = vUv - vec2(offsetX, offsetY);\n\n    // Get scaled design UV.\n    vec2 scaledDesignUV = (translatedUV - vec2(0.5)) * 1.0/designScale + vec2(0.5);\n\n    // Get rotated UV\n    vec2 rotatedUV = rotateUV(scaledDesignUV, rotation, 0.5);\n\n    // Use the grayscale constant (e.g. [170/255, 170/255]) to displace our UV coord.\n    vec2 distortedPosition = rotatedUV + displacementVector * displacementIntensity - vec2(displacementIntensity);\n\n    vec4 _mockup = texture2D(mockup, mockupTranslatedUV);\n    vec4 _design = texture2D(design, distortedPosition);\n\n    if (multiply) {\n        // Use multiply blending to merge the mockup and design textures.\n        vec3 blended = _mockup.rgb * (1.0 - _design.a) + ((_mockup.rgb - vec3(multiplyIntensity)) * _design.rgb * _design.a);\n        \n        vec3 blendedWithOpacity = blended * blendOpacity + _mockup.rgb * (1.0 - blendOpacity);\n        gl_FragColor = vec4(blendedWithOpacity, 1.0);\n\n    } else {\n        vec3 blended = _mockup.rgb * (1.0 - _design.a) + _design.rgb * _design.a;\n        gl_FragColor = vec4(blended, 1.0);\n    }\n}\n`;\n\n    /**\n     * Configurable parameters\n     */\n    const renderHeight = 1000;\n    const renderWidth = 1000;\n    var data = {\n        multiply: true,\n        displacement: true,\n        displacementIntensity: 0.012,\n        multiplyIntensity: -0.15,\n        blendOpacity: 0.95,\n        rotation: -5,\n        offsetX: 17,\n        offsetY: 70,\n        scale: 0.45,\n    };\n\n    const gui = new dat.GUI();\n    gui.add(data, \"multiply\");\n    gui.add(data, \"displacement\");\n    gui.add(data, \"displacementIntensity\", 0, 0.02, 0.001);\n    gui.add(data, \"multiplyIntensity\", -0.5, 0.5, 0.05);\n    gui.add(data, \"blendOpacity\", 0, 1, 0.05);\n    gui.add(data, \"rotation\", -10, 10, 0.5).listen();\n    gui.add(data, \"offsetX\", -200, 200, 1).listen();\n    gui.add(data, \"offsetY\", -200, 200, 1).listen();\n    gui.add(data, \"scale\", 0, 1, 0.01).listen();\n\n    var loader = new THREE.TextureLoader();\n    loader.crossOrigin = \"\";\n\n    /**\n     * Load in all of our textures for the mockup, design, and displacement map.\n     */\n    const promiseLoader = (url) =>\n        new Promise((resolve, reject) => {\n            loader.load(url, (data) => resolve(data), null, reject);\n        });\n\n    var mockupTexture = await promiseLoader(mockup);\n    var designTexture = await promiseLoader(design);\n    var displacementMapTexture = await promiseLoader(displacementMap);\n    mockupTexture.magFilter = mockupTexture.minFilter = THREE.LinearFilter;\n    designTexture.magFilter = designTexture.minFilter = THREE.LinearFilter;\n    displacementMapTexture.magFilter = displacementMapTexture.minFilter = THREE.LinearFilter;\n\n    const mockupWidth = mockupTexture.image.width;\n    const mockupHeight = mockupTexture.image.height;\n    const designWidth = designTexture.image.width;\n    const designHeight = designTexture.image.height;\n    const mockupAspectRatio = mockupWidth / mockupHeight;\n    const renderAspectRatio = renderWidth / renderHeight;\n    const designAspectRatio = designWidth / designHeight;\n\n    /**\n     * Compute mockup & design image scaling and translation.\n     */\n    let mW = 0;\n    let mH = 0;\n    let dW = 0;\n    let dH = 0;\n    if (mockupAspectRatio == renderAspectRatio) {\n        // ▓▓ « ▓▓\n        mW = renderWidth;\n        mH = renderHeight;\n        dH = 1.0; // entire y-axis used to render design (aka full mockup height)\n        dW = (renderHeight * designAspectRatio) / renderWidth; // % of x-axis used to render design\n    } else if (mockupAspectRatio > renderAspectRatio) {\n        // ▓▓ « ▓▓▓▓\n        mW = renderHeight * mockupAspectRatio;\n        mH = renderHeight;\n        dH = 1.0; // entire y-axis used to render design (aka full mockup height)\n        dW = (renderHeight * designAspectRatio) / renderWidth; // % of x-axis used to render design\n    } else if (mockupAspectRatio < renderAspectRatio) {\n        // ▓▓ « ▓\n        mW = renderWidth;\n        mH = renderWidth / mockupAspectRatio;\n        dH = 1.0 / (renderHeight / mH); // more than 100% of y-axis used to render design, because a portion of the mockup y-axis is off screen\n        dW = (mH * designAspectRatio) / renderWidth; // calculate % of x-axis used to render design\n    }\n\n    // Mockup Size is the % of the mockup visible in the render area (e.g. 80% X, and 100% Y for the ▓▓ « ▓▓▓▓ case)\n    const mockupSize = new THREE.Vector2(renderWidth / mW, renderHeight / mH);\n\n    // Mockup Offset centers the newly sized mockupin the render area.\n    const mockupOffset = new THREE.Vector2((1 - mockupSize.x) / 2, (1 - mockupSize.y) / 2);\n\n    const computeDesignScale = (scale) => new THREE.Vector2(dW * scale, dH * scale);\n    const computeDesignRotation = (degrees) => (degrees / 360) * Math.PI * 2;\n    const computeDesignOffset = (offset) => offset / 1000;\n\n    /**\n     * Uniforms\n     */\n    var mat = new THREE.ShaderMaterial({\n        uniforms: {\n            displacementIntensity: {\n                type: \"f\",\n                value: data.displacementIntensity,\n            },\n            mockup: {\n                type: \"t\",\n                value: mockupTexture,\n            },\n            design: {\n                type: \"t\",\n                value: designTexture,\n            },\n            designScale: {\n                type: \"vec2\",\n                value: computeDesignScale(data.scale),\n            },\n            offsetX: {\n                type: \"f\",\n                value: computeDesignOffset(data.offsetX),\n            },\n            offsetY: {\n                type: \"f\",\n                value: computeDesignOffset(data.offsetY),\n            },\n            mockupOffset: {\n                type: \"vec2\",\n                value: mockupOffset,\n            },\n            mockupSize: {\n                type: \"vec2\",\n                value: mockupSize,\n            },\n            displacementMap: {\n                type: \"t\",\n                value: displacementMapTexture,\n            },\n            multiply: {\n                type: \"bool\",\n                value: data.multiply,\n            },\n            multiplyIntensity: {\n                type: \"f\",\n                value: data.multiplyIntensity,\n            },\n            blendOpacity: {\n                type: \"f\",\n                value: data.blendOpacity,\n            },\n            displacement: {\n                type: \"bool\",\n                value: data.displacement,\n            },\n            rotation: {\n                type: \"f\",\n                value: computeDesignRotation(data.rotation),\n            },\n        },\n\n        vertexShader: vertex,\n        fragmentShader: fragment,\n        transparent: true,\n        opacity: 1.0,\n    });\n\n    /**\n     * Configure ThreeJS scene and add the rendering Canvas to the DOM.\n     */\n    var scene = new THREE.Scene();\n    var camera = new THREE.OrthographicCamera(renderWidth / -2, renderWidth / 2, renderHeight / 2, renderHeight / -2, 1, 1000);\n    camera.position.z = 1;\n\n    var renderer = new THREE.WebGLRenderer({\n        antialias: false,\n        alpha: true,\n    });\n    renderer.setPixelRatio(2.0);\n    renderer.setClearColor(0xffffff, 0.0);\n    renderer.setSize(renderWidth, renderHeight);\n\n    const domElem = renderer.domElement;\n    domElem.style.height = renderHeight;\n    domElem.style.width = renderWidth;\n    parent.appendChild(domElem);\n\n    var geometry = new THREE.PlaneBufferGeometry(renderWidth, renderHeight, 1);\n    var object = new THREE.Mesh(geometry, mat);\n    scene.add(object);\n\n    /**\n     * Render loop\n     */\n    var render = function() {\n        window.requestAnimationFrame(render);\n        mat.uniforms.multiply.value = data.multiply;\n        mat.uniforms.displacement.value = data.displacement;\n        mat.uniforms.displacementIntensity.value = data.displacementIntensity;\n        mat.uniforms.multiplyIntensity.value = data.multiplyIntensity;\n        mat.uniforms.blendOpacity.value = data.blendOpacity;\n        mat.uniforms.rotation.value = computeDesignRotation(data.rotation);\n        mat.uniforms.offsetX.value = computeDesignOffset(data.offsetX);\n        mat.uniforms.offsetY.value = computeDesignOffset(data.offsetY);\n        mat.uniforms.designScale.value = computeDesignScale(data.scale);\n        renderer.render(scene, camera);\n    };\n\n    window.requestAnimationFrame(render);\n}\n"],"names":["mockup","design","displacementMap","parent","render","data","multiply","displacement","displacementIntensity","multiplyIntensity","blendOpacity","rotation","offsetX","offsetY","scale","gui","dat","add","listen","loader","THREE","crossOrigin","promiseLoader","url","Promise","resolve","reject","load","mockupTexture","designTexture","displacementMapTexture","magFilter","minFilter","mockupAspectRatio","image","width","height","designAspectRatio","mW","mH","dW","dH","renderWidth","mockupSize","mockupOffset","x","y","computeDesignScale","computeDesignRotation","degrees","Math","PI","computeDesignOffset","offset","mat","uniforms","type","value","designScale","vertexShader","fragmentShader","transparent","opacity","scene","camera","renderHeight","position","z","renderer","antialias","alpha","setPixelRatio","setClearColor","setSize","domElem","domElement","style","appendChild","geometry","object","window","requestAnimationFrame"],"mappings":"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"}